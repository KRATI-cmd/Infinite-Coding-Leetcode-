Q) Nearly Sorted Array
Problem Link: https://practice.geeksforgeeks.org/problems/nearly-sorted-1587115620/1/

e.g. arr[]={6,5,3,2,8,10,9}, n =7, K=3

Problem:Given an array of n elements, where each element is at most k away from its target position, you need to sort the array optimally.
Let say 6 is atmost K far away from given position i.e. from 0 to 3 in above question because the order should be {2,3,5,6,8,9,10} i.e. correct position of 6 is 3.

Approach:

Brute Force: To sort the array & return it. = O(nlog n)
sort(arr,arr+n);
return arr;

Optimal : To use heap

Identification: a) K
                b) Smallest/ largest

So k is present here we go for heap as we can solve in O(nlog K)

For given question: arr[]={6,5,3,2,8,10,9}, n =7, K=3

Here element is at max k far i.e. we use min heap(reverse method).Refer Day 1 for reverse method
Understand it by this example.

                                Initially we insert 6 in heap => |6| which is at top of heap => chk if size of heap > K =>pop => 1>3=> condition false => don't pop

                                Now we insert next ele 5 in heap => |6|5| => now 5 is at top of heap due to min heap => 2 > 3 => condition false => don't pop 

                                We insert next ele 3 in heap => |6|5|3| => now 3 is at top of heap due to min heap => 3 > 3  => condition false => don't pop

                                We insert next ele 2 in heap => |6|5|3|2| => now 2 is at top of heap due to min heap => 4 > 3  => condition true => pop & insert 2 in vector
                                Now elements are |6|5|3| now chk size > K => 3 > 3 condition false => don't pop

                                We insert next ele 8 in heap => |8|6|5|3| => now 3 is at top of heap due to min heap => 4 > 3  => condition true => pop & insert 3 in vector
                                Now elements are |8|6|5| now chk size > K => 3 > 3 condition false => don't pop

                                We insert next ele 10 in heap => |10|8|6|5| => now 5 is at top of heap due to min heap => 4 > 3  => condition true => pop & insert 5 in vector
                                Now elements are |10|8|6| now chk size > K => 3 > 3 condition false => don't pop

                                We insert next ele 9 in heap => |10|9|8|6| => now 6 is at top of heap due to min heap => 4 > 3  => condition true => pop & insert 6 in vector
                                Now elements are |10|8|6| now chk size > K => 3 > 3 condition false => don't pop

Empty the heap until size !=0 & push it into vector =>push 8 then 9 then 10
Return the array => |2|3|5|6|8|9|10|

Code(In C++)
         vector <int> ans;
         priority_queue<int,vector<int>,greater<int>> minh;
         for(int i=0;i<n;i++){
             minh.push(a[i]);
             if(minh.size()>k){
                 int x = minh.top();
                 minh.pop();
                 ans.push_back(x);
                 
             }
         }
         
         while(minh.size() > 0){
             ans.push_back(minh.top());
             minh.pop();
         }
         return ans;


Thanks! If any doubt pls let me know :)
 









