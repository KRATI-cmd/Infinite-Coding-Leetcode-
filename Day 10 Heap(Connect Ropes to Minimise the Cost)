Given are N ropes of different lengths, the task is to connect these ropes into one rope with minimum cost, such that the cost to connect two ropes is equal to the sum of their lengths.

Examples:

Input: arr[] = {4,3,2,6} , N = 4
Output: 29
Explanation: 

First, connect ropes of lengths 2 and 3. Now we have three ropes of lengths 4, 6, and 5. 
Now connect ropes of lengths 4 and 5. Now we have two ropes of lengths 6 and 9. 
Finally connect the two ropes and all ropes have connected.

Identification: a) K
                b) Smallest/ Largest

With these identification, we go for min heap(reverse method)

Algo: Create a min heap
      Always first two top elements & store & add their cost
      Insert their cost in heap
      Return the cost


Code: int cost=0;
      priority_queue<int,vector<int>, greater<int>> minh;
      for(int i=0;i<n;i++){
        minh.push(arr[i]);
}

while(minh.size()>=2){
  int first =minh.top();
  minh.pop();
  int second = minh.top();
  minh.pop();
  minh.push(first+second);
  cost=cost+first+second;
}

return cost;


Thanks:) Keep going ::))
